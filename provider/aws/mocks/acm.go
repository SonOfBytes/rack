// Automatically generated by MockGen. DO NOT EDIT!
// Source: vendor/github.com/aws/aws-sdk-go/service/acm/acmiface/interface.go

package mocks

import (
	request "github.com/aws/aws-sdk-go/aws/request"
	acm "github.com/aws/aws-sdk-go/service/acm"
	gomock "github.com/golang/mock/gomock"
)

// Mock of ACMAPI interface
type MockACMAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockACMAPIRecorder
}

// Recorder for MockACMAPI (not exported)
type _MockACMAPIRecorder struct {
	mock *MockACMAPI
}

func NewMockACMAPI(ctrl *gomock.Controller) *MockACMAPI {
	mock := &MockACMAPI{ctrl: ctrl}
	mock.recorder = &_MockACMAPIRecorder{mock}
	return mock
}

func (_m *MockACMAPI) EXPECT() *_MockACMAPIRecorder {
	return _m.recorder
}

func (_m *MockACMAPI) AddTagsToCertificateRequest(_param0 *acm.AddTagsToCertificateInput) (*request.Request, *acm.AddTagsToCertificateOutput) {
	ret := _m.ctrl.Call(_m, "AddTagsToCertificateRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acm.AddTagsToCertificateOutput)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) AddTagsToCertificateRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddTagsToCertificateRequest", arg0)
}

func (_m *MockACMAPI) AddTagsToCertificate(_param0 *acm.AddTagsToCertificateInput) (*acm.AddTagsToCertificateOutput, error) {
	ret := _m.ctrl.Call(_m, "AddTagsToCertificate", _param0)
	ret0, _ := ret[0].(*acm.AddTagsToCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) AddTagsToCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AddTagsToCertificate", arg0)
}

func (_m *MockACMAPI) DeleteCertificateRequest(_param0 *acm.DeleteCertificateInput) (*request.Request, *acm.DeleteCertificateOutput) {
	ret := _m.ctrl.Call(_m, "DeleteCertificateRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acm.DeleteCertificateOutput)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) DeleteCertificateRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteCertificateRequest", arg0)
}

func (_m *MockACMAPI) DeleteCertificate(_param0 *acm.DeleteCertificateInput) (*acm.DeleteCertificateOutput, error) {
	ret := _m.ctrl.Call(_m, "DeleteCertificate", _param0)
	ret0, _ := ret[0].(*acm.DeleteCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) DeleteCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteCertificate", arg0)
}

func (_m *MockACMAPI) DescribeCertificateRequest(_param0 *acm.DescribeCertificateInput) (*request.Request, *acm.DescribeCertificateOutput) {
	ret := _m.ctrl.Call(_m, "DescribeCertificateRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acm.DescribeCertificateOutput)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) DescribeCertificateRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeCertificateRequest", arg0)
}

func (_m *MockACMAPI) DescribeCertificate(_param0 *acm.DescribeCertificateInput) (*acm.DescribeCertificateOutput, error) {
	ret := _m.ctrl.Call(_m, "DescribeCertificate", _param0)
	ret0, _ := ret[0].(*acm.DescribeCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) DescribeCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DescribeCertificate", arg0)
}

func (_m *MockACMAPI) GetCertificateRequest(_param0 *acm.GetCertificateInput) (*request.Request, *acm.GetCertificateOutput) {
	ret := _m.ctrl.Call(_m, "GetCertificateRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acm.GetCertificateOutput)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) GetCertificateRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCertificateRequest", arg0)
}

func (_m *MockACMAPI) GetCertificate(_param0 *acm.GetCertificateInput) (*acm.GetCertificateOutput, error) {
	ret := _m.ctrl.Call(_m, "GetCertificate", _param0)
	ret0, _ := ret[0].(*acm.GetCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) GetCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCertificate", arg0)
}

func (_m *MockACMAPI) ListCertificatesRequest(_param0 *acm.ListCertificatesInput) (*request.Request, *acm.ListCertificatesOutput) {
	ret := _m.ctrl.Call(_m, "ListCertificatesRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acm.ListCertificatesOutput)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) ListCertificatesRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCertificatesRequest", arg0)
}

func (_m *MockACMAPI) ListCertificates(_param0 *acm.ListCertificatesInput) (*acm.ListCertificatesOutput, error) {
	ret := _m.ctrl.Call(_m, "ListCertificates", _param0)
	ret0, _ := ret[0].(*acm.ListCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) ListCertificates(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCertificates", arg0)
}

func (_m *MockACMAPI) ListCertificatesPages(_param0 *acm.ListCertificatesInput, _param1 func(*acm.ListCertificatesOutput, bool) bool) error {
	ret := _m.ctrl.Call(_m, "ListCertificatesPages", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockACMAPIRecorder) ListCertificatesPages(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListCertificatesPages", arg0, arg1)
}

func (_m *MockACMAPI) ListTagsForCertificateRequest(_param0 *acm.ListTagsForCertificateInput) (*request.Request, *acm.ListTagsForCertificateOutput) {
	ret := _m.ctrl.Call(_m, "ListTagsForCertificateRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acm.ListTagsForCertificateOutput)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) ListTagsForCertificateRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTagsForCertificateRequest", arg0)
}

func (_m *MockACMAPI) ListTagsForCertificate(_param0 *acm.ListTagsForCertificateInput) (*acm.ListTagsForCertificateOutput, error) {
	ret := _m.ctrl.Call(_m, "ListTagsForCertificate", _param0)
	ret0, _ := ret[0].(*acm.ListTagsForCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) ListTagsForCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListTagsForCertificate", arg0)
}

func (_m *MockACMAPI) RemoveTagsFromCertificateRequest(_param0 *acm.RemoveTagsFromCertificateInput) (*request.Request, *acm.RemoveTagsFromCertificateOutput) {
	ret := _m.ctrl.Call(_m, "RemoveTagsFromCertificateRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acm.RemoveTagsFromCertificateOutput)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) RemoveTagsFromCertificateRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveTagsFromCertificateRequest", arg0)
}

func (_m *MockACMAPI) RemoveTagsFromCertificate(_param0 *acm.RemoveTagsFromCertificateInput) (*acm.RemoveTagsFromCertificateOutput, error) {
	ret := _m.ctrl.Call(_m, "RemoveTagsFromCertificate", _param0)
	ret0, _ := ret[0].(*acm.RemoveTagsFromCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) RemoveTagsFromCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveTagsFromCertificate", arg0)
}

func (_m *MockACMAPI) RequestCertificateRequest(_param0 *acm.RequestCertificateInput) (*request.Request, *acm.RequestCertificateOutput) {
	ret := _m.ctrl.Call(_m, "RequestCertificateRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acm.RequestCertificateOutput)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) RequestCertificateRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RequestCertificateRequest", arg0)
}

func (_m *MockACMAPI) RequestCertificate(_param0 *acm.RequestCertificateInput) (*acm.RequestCertificateOutput, error) {
	ret := _m.ctrl.Call(_m, "RequestCertificate", _param0)
	ret0, _ := ret[0].(*acm.RequestCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) RequestCertificate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RequestCertificate", arg0)
}

func (_m *MockACMAPI) ResendValidationEmailRequest(_param0 *acm.ResendValidationEmailInput) (*request.Request, *acm.ResendValidationEmailOutput) {
	ret := _m.ctrl.Call(_m, "ResendValidationEmailRequest", _param0)
	ret0, _ := ret[0].(*request.Request)
	ret1, _ := ret[1].(*acm.ResendValidationEmailOutput)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) ResendValidationEmailRequest(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResendValidationEmailRequest", arg0)
}

func (_m *MockACMAPI) ResendValidationEmail(_param0 *acm.ResendValidationEmailInput) (*acm.ResendValidationEmailOutput, error) {
	ret := _m.ctrl.Call(_m, "ResendValidationEmail", _param0)
	ret0, _ := ret[0].(*acm.ResendValidationEmailOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockACMAPIRecorder) ResendValidationEmail(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResendValidationEmail", arg0)
}
